{
  "version": 3,
  "sources": ["../src/extension.js"],
  "sourcesContent": ["\"use strict\";\n\n// loader-code: wait until gmailjs has finished loading, before triggering actual extensiode-code.\nconst loaderId = setInterval(() => {\n  if (!window._gmailjs) {\n    return;\n  }\n\n  clearInterval(loaderId);\n  startExtension(window._gmailjs);\n}, 100);\n\n// actual extension-code\nfunction startExtension(gmail) {\n  window.gmail = gmail;\n\n  gmail.observe.on(\"load\", () => {\n    gmail.observe.on(\"view_email\", (domEmail) => {\n      console.log(\"Looking at email:\", domEmail);\n      const emailData = gmail.new.get.email_data(domEmail);\n      console.log(\"Email data:\", emailData);\n    });\n\n    gmail.observe.on(\"compose\", (compose) => {\n      gmail.tools.add_compose_button(\n        compose,\n        \"Reply GPT\",\n        async function () {\n          const currentEmailId = compose.email_id();\n          const currentEmailBody = compose.body();\n          const currentEmailSubject = compose.subject();\n          let currentEmailTo = compose.recipients().to[0];\n          let currentEmailFrom = compose.from();\n          if (gmail.new.get.email_data(currentEmailId)) {\n            currentEmailTo =\n              gmail.new.get.email_data(currentEmailId).to[0].name;\n            currentEmailFrom =\n              gmail.new.get.email_data(currentEmailId).from.name;\n          }\n          const currentThread = compose.thread_id();\n          const threadDetails = await gmail.new.get.thread_data(currentThread);\n\n          let lastEmail = null;\n          if (threadDetails) {\n            for (let email of threadDetails.emails) {\n              if (!email.is_draft) {\n                lastEmail = email;\n              }\n              if (email.id === currentEmailId) {\n                break;\n              }\n            }\n          }\n\n          const data = {\n            currentEmailBody: htmlToText(removeSignature(currentEmailBody)),\n            currentEmailSubject,\n            previousEmailBody: lastEmail\n              ? htmlToText(lastEmail.content_html)\n              : null,\n            emailTo: currentEmailTo,\n            emailFrom: currentEmailFrom,\n          };\n\n          let url = localStorage.getItem(\"replyGPTWebhook\");\n\n          if (!url) {\n            await gmail.tools.add_modal_window(\n              \"First time using this extension? Enter your webhook here\",\n              \"<input type='text' id='myWebhookInput' placeholder='https://hook.us1.make.com/XXXXXX' > <p>To change url later you will need to reset local storage ('clear cookies')</p>\",\n              function () {\n                url = document.querySelector(\"#myWebhookInput\").value;\n                localStorage.setItem(\"replyGPTWebhook\", url);\n                gmail.tools.remove_modal_window();\n                fetchReply(data);\n              }\n            );\n          } else fetchReply(data);\n\n          async function fetchReply(data) {\n            const animation = [\n              \"\u2554\u2550\u2550\u2550\u2550\u2564\u2564\u2564\u2564\u2550\u2550\u2550\u2550\u2557\\n\u2551    \u2502\u2502\u2502 \\\\   \u2551\\n\u2551    \u2502\u2502\u2502  O  \u2551\\n\u2551    OOO     \u2551\",\n              \"\u2554\u2550\u2550\u2550\u2550\u2564\u2564\u2564\u2564\u2550\u2550\u2550\u2550\u2557\\n\u2551    \u2502\u2502\u2502\u2502    \u2551\\n\u2551    \u2502\u2502\u2502\u2502    \u2551\\n\u2551    OOOO    \u2551\",\n              \"\u2554\u2550\u2550\u2550\u2550\u2564\u2564\u2564\u2564\u2550\u2550\u2550\u2550\u2557\\n\u2551   / \u2502\u2502\u2502    \u2551\\n\u2551  O  \u2502\u2502\u2502    \u2551\\n\u2551     OOO    \u2551\",\n              \"\u2554\u2550\u2550\u2550\u2550\u2564\u2564\u2564\u2564\u2550\u2550\u2550\u2550\u2557\\n\u2551    \u2502\u2502\u2502\u2502    \u2551\\n\u2551    \u2502\u2502\u2502\u2502    \u2551\\n\u2551    OOOO    \u2551\",\n            ];\n\n            let i = 0;\n            let waiting = setInterval(function () {\n              compose.body(\n                \"<p>Waiting for reply from machine overlord ...</p>\" +\n                  \"<pre>\" +\n                  animation[i].replace(/\\n/g, \"<br>\").replace(/\\s/g, \"&nbsp;\") +\n                  \"</pre>\"\n              );\n              i = (i + 1) % animation.length;\n            }, 300);\n\n            const response = await fetch(url, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n\n              body: JSON.stringify(data),\n            });\n            const text = await response.text();\n            clearInterval(waiting);\n            console.log(text);\n            compose.body(text);\n          }\n\n          function htmlToText(html) {\n            function stripHtml(str) {\n              str = str.replace(/<br>/gi, \"\\n\");\n              str = str.replace(/<div>/gi, \"\\n\");\n              str = str.replace(/<p.*>/gi, \"\\n\");\n              // str = str.replace(\n              //   /<a.*href=\"(.*?)\".*>(.*?)<\\/a>/gi,\n              //   \" $2 (Link->$1) \"\n              // );\n\n              str = str.replace(/<(?:.|\\s)*?>/g, \"\");\n              str = str.replace(/\\<|\\>/g, \"\");\n              str = str.replace(/[\\s\\s]{2,}/gm, \"\\n\");\n              return str;\n            }\n            return stripHtml(html);\n          }\n\n          function removeSignature(currentEmailBody) {\n            let currentEmailBodyWithoutSignature =\n              new DOMParser().parseFromString(currentEmailBody, \"text/html\");\n            let signature = currentEmailBodyWithoutSignature.querySelector(\n              '[data-smartmail=\"gmail_signature\"]'\n            );\n            if (signature) signature.remove();\n            currentEmailBodyWithoutSignature =\n              currentEmailBodyWithoutSignature.body.innerHTML;\n            return currentEmailBodyWithoutSignature;\n          }\n        },\n        \"Custom Style Classes\"\n      );\n      //   }\n    });\n  });\n}\n\nexport default startExtension;\n"],
  "mappings": "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",
  "names": ["data", "currentEmailBody"]
}
